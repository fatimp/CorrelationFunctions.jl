function gencenters(side, λ)
    n = pois_rand(λ * side^2)
    return reduce(hcat, (rand(1:side, 2) for i in 1:n))
end

function gendisks(side, R, λ)
    spheres = zeros(Int8, (side + 2R + 1, side + 2R + 1))
    sphere  = zeros(Int8, (2R + 1, 2R + 1))
    centers = gencenters(side, λ)
    for i in -R:R
        for j in -R:R
            dist = i^2 + j^2
            if dist < R^2
                sphere[j+R+1, i+R+1] = 1
            end
        end
    end
    for center in (centers[:,i] for i in 1:size(centers,2))
        x = center[1]
        y = center[2]
        spheres[x:x + 2R, y:y + 2R] .|= sphere
    end
    return spheres[R+1:end-R-1, R+1:end-R-1]
end

function s2_theory(r, R, λ)
    tmp = r/(2R)
    tmp2 = (r > 2R) ? 2 : 2/π*(π + tmp*sqrt(1 - tmp^2) - acos(tmp))
    η = λ * π * R^2
    return exp(-η*abs(tmp2))
end

function l2_theory(r, R, λ)
    η = λ * π * R^2
    p = exp(-η)
    return p^(1 + 2r/(π*R))
end

# Theoretical value of surface-surface function for r > 2R
ss_theory_const(R, λ) = (4π * λ * R)^2 * s2_theory(3R, R, λ)

@testset "S2 on random overlapping disks generated by Poisson process" begin
    # Area = S^2, radius of a disk = R
    # Poisson parameter = λ, number of datasets = n
    # Compare s2(x) for x ∈ {0,1,...,N-1}
    S = 7000; R = 50; λ = 1e-4; n = 4
    N = 3000

    f = mean ∘ s2
    iter = (f(gendisks(S, R, λ), N, 0) for i in 1:n)

    calc = sum(iter) ./ n
    theory = [s2_theory(r-1, R, λ) for r in 1:N]

    err = relerr.(calc, theory)
    @test maximum(err) < 0.04
end

@testset "L2 on random overlapping disks generated by Poisson process" begin
    # Area = S^2, radius of a disk = R
    # Poisson parameter = λ, number of datasets = n
    # Compare s2(x) for x ∈ {0,1,...,N-1}
    S = 7000; R = 50; λ = 1e-4; n = 4
    N = 700

    f = mean ∘ l2
    iter = (f(gendisks(S, R, λ), N, 0) for i in 1:n)

    calc = log.(sum(iter) ./ n)
    theory = [(log ∘ l2_theory)(r-1, R, λ) for r in 1:N]

    err = relerr.(calc, theory)
    @test maximum(err) < 0.07
end

@testset "SS on random overlapping disks generated by Poisson process" begin
    # Area = S^2, radius of a disk = R
    # Poisson parameter = λ, number of datasets = n
    # Compare s2(x) for x ∈ {0,1,...,N-1}
    S = 7000; R = 50; λ = 1e-4; n = 4
    N = 3000

    f = mean ∘ surfsurf
    iter = (f(gendisks(S, R, λ), N, 0) for i in 1:n)

    calc = log.(sum(iter) ./ n)[2R + 20]
    theory = (log ∘ ss_theory_const)(R, λ)

    err = relerr.(calc, fill(theory, length(calc)))
    @test maximum(err) < 0.04
end
