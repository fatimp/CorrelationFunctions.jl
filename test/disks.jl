function gencenters(side, λ)
    n = (λ * side^2) |> Poisson |> rand
    return reduce(hcat, (rand(1:side, 2) for i in 1:n))
end

function gendisks(side, R, λ)
    spheres = zeros(Int8, (side + 2R + 1, side + 2R + 1))
    sphere  = zeros(Int8, (2R + 1, 2R + 1))
    centers = gencenters(side, λ)
    for i in -R:R
        for j in -R:R
            dist = i^2 + j^2
            if dist < R^2
                sphere[j+R+1, i+R+1] = 1
            end
        end
    end
    for center in (centers[:,i] for i in 1:size(centers,2))
        x = center[1]
        y = center[2]
        spheres[x:x + 2R, y:y + 2R] .|= sphere
    end
    return spheres[R+1:end-R-1, R+1:end-R-1]
end

function l2_theory(r, R, λ)
    η = λ * π * R^2
    p = exp(-η)
    return p^(1 + 2r/(π*R))
end

s2_theory(r, R) = (r < 2R) ? 2R^2*acos(r/(2R)) - r/2*sqrt(4R^2 - r^2) : 0
ss_theory(r, R) = (r < 2R) ? 4R^2/(r*sqrt(4R^2-r^2)) : 0
sv_theory(r, R) = (r < 2R) ? 2R*(π - acos(r/(2R))) : 2π*R

function pore_size_theory(r, R, λ)
    s(x) = 2π * x
    v(x) = π * x^2
    η  = v(R) * λ
    p  = exp(-η)
    s1 = s(r + R)
    v1 = v(r + R)
    return λ * s1 * exp(-λ * v1) / p
end

function chord_length_theory(r, R, λ)
    η = λ * π * R^2
    p = exp(-η)
    return 2η/(π*R)*p^(2r/(π*R))
end

mean_chord_length(R, λ) = 1/(2λ*R)

@testset "L2 on random overlapping disks generated by Poisson process" begin
    # Area = S^2, radius of a disk = R
    # Poisson parameter = λ
    S = 7000; R = 40; λ = 5e-5; N = 700

    disks = gendisks(S, R, λ)
    calc = Directional.l2(disks, 0; len = N, periodic = true) |> mean .|> log
    theory = [(log ∘ l2_theory)(r-1, R, λ) for r in 0:N - 1]

    err = relerr.(calc, theory)
    @test maximum(err) < 0.15
end

@testset "S2 for a disk" begin
    S = 500; R = 40

    th(r)  = s2_theory(r, R)
    disk   = draw_ball((S, S), R)
    calc   = Directional.s2(disk, true; periodic = true) |> mean
    theory = th.(0:length(calc)-1) / S^2

    @test relerr_norm(calc, theory) < 0.01
end

@testset "SS for a disk" begin
    R = 40.2
    S = 500
    boundary = 2R |> floor |> Int

    disk   = draw_ball((S, S), R)
    th(r)  = ss_theory(r, R)
    calc   = Directional.surfsurf(disk, false; periodic = true) |> mean
    theory = th.(0:boundary) / S^2

    # FIXME: There values are almost zero, hence the high percentage.
    @test relerr_norm(calc[2:length(theory)-1], theory[2:end-1]) < 0.18
    @test maximum(calc[boundary+5:end]) < 1e-5
end

@testset "SV for a disk" begin
    S = 500; R = 40

    th(r)  = sv_theory(r, R)
    disk   = draw_ball((S, S), R)
    calc   = Directional.surfvoid(disk, false; periodic = true) |> mean
    theory = th.(0:length(calc)-1) / S^2

    @test relerr_norm(calc, theory) < 0.03
end

@testset "Pore size on random overlapping disks generated by Poisson process" begin
    # Area = S^2, radius of a disk = R, Poisson parameter = λ
    S = 7000; R = 50; λ = 5e-5
    disks = gendisks(S, R, λ)

    calc = pore_size(disks; nbins = 20)
    edges = calc.edges[1]
    s = step(edges)
    theory = [integrate(x -> pore_size_theory(x, R, λ), n:0.05:n+s)
              for n in 0:s:s*(length(edges) - 2)]

    # Compare cummulative distributions instead of probability
    # densities because density is almost zero for big radii.
    calc_cdf = scan(calc.weights)
    theory_cdf = scan(theory)

    err = relerr.(calc_cdf, theory_cdf)
    @test maximum(err) < 0.1
end

@testset "Chord length on random overlapping disks generated by Poisson process" begin
    # Area = S^2, radius of a disk = R, Poisson parameter = λ
    S = 7000; R = 60; λ = 1e-4
    disks = gendisks(S, R, λ)

    data = Directional.chord_length(disks, 0; nbins = 35)
    edges = data.hist.edges[1]
    s = step(edges)
    theory = [integrate(x -> chord_length_theory(x, R, λ), n:0.05:n+s)
              for n in 0:s:s*(length(edges) - 2)]

    # Compare cummulative distributions instead of probability
    # densities because density is almost zero for big lengths.
    calc_cdf = scan(data.hist.weights)
    theory_cdf = scan(theory)

    err = relerr.(calc_cdf, theory_cdf)
    @test maximum(err) < 0.1
    @test relerr(data.μ, mean_chord_length(R, λ)) < 0.1
end
